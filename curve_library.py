import maya.cmds as cmds

class RigCurveLibrary(object):
	
	@classmethod
	def circle(cls, radius=1.0, name="circle_crv"):
		return cmds.circle(center=(0, 0, 0), normal=(0, 1, 0), radius=radius, name=name)[0]
	
	@classmethod
	def two_way_arrow(cls, name="two_way_arrow_crv"):
		return cmds.curve(
			degree=1,
			point=[
				(-1, 0, -2),
				(-2, 0, -2),
				(0, 0, -4),
				(2, 0, -2),
				(1, 0, -2),
				(1, 0, 2),
				(2, 0, 2),
				(0, 0, 4),
				(-2, 0, 2),
				(-1, 0, 2),
				(-1, 0, -2)
			],
			knot=list(range(11)),
			name=name
		)
	@classmethod
	def create_cube_curve(cls, name="cube"):
		cube = cmds.curve(degree=1, point=[
			[-0.5, 0.5, 0.5],
			[0.5, 0.5, 0.5],
			[0.5, -0.5, 0.5],
			[-0.5, -0.5, 0.5],
			[-0.5, 0.5, 0.5],
			[-0.5, 0.5, -0.5],
			[0.5, 0.5, -0.5],
			[0.5, 0.5, 0.5],
			[0.5, -0.5, 0.5],
			[0.5, -0.5, -0.5],
			[0.5, 0.5, -0.5],
			[-0.5, 0.5, -0.5],
			[-0.5, -0.5, -0.5],
			[0.5, -0.5, -0.5],
			[0.5, -0.5, 0.5],
			[-0.5, -0.5, 0.5],
			[-0.5, -0.5, -0.5]
		],
						  name=name)
		return cube
	@classmethod
	def create_rectangle_line_curve(cls, name="rectangle_line"):
		points = [
			[-1.0, 0.0, -1.0],  # CV[0]
			[-1.0, 0.0, 0.0],  # CV[1]
			[0.0, 0.0, 0.0],  # CV[2]
			[1.0, 0.0, 0.0],  # CV[3]
			[1.0, 0.0, -1.0],  # CV[4]
			[-1.0, 0.0, -1.0],  # CV[5] - close loop
			[-1.0, 0.0, 0.0],  # CV[6]
			[0.0, 0.0, 0.0],  # CV[7]
			[0.0, 0.0, -1.0],  # CV[8]
			[0.0, 0.0, 0.0],  # CV[9]
			[0.0, 0.0, 1.0]  # CV[10]
		]
		
		rec_line = cmds.curve(degree=1, point=points, name=name)
		return rec_line
	@classmethod
	def create_rectangle_curve(cls, name="rectangle"):
		points = [
			[-1.0, 0.0, -1.0],  # CV[0]
			[-1.0, 0.0, 0.0],  # CV[1]
			[1.0, 0.0, 0.0],  # CV[2]
			[1.0, 0.0, -1.0],  # CV[3]
			[-1.0, 0.0, -1.0]  # CV[4] - closing the loop
		]
		
		rec = cmds.curve(degree=1, point=points, name=name)
		return rec
	@classmethod
	def create_square_curve(cls, name="square", size=50):
		points = [
			[-1.0, 0.0, -1.0],  # CV[0]
			[-1.0, 0.0, 1.0],  # CV[1]
			[1.0, 0.0, 1.0],  # CV[2]
			[1.0, 0.0, -1.0],  # CV[3]
			[-1.0, 0.0, -1.0]  # CV[4] - closing the loop
		]
		
		square = cmds.curve(name=name, degree=1, point=points)
		return square
	@classmethod
	def create_rectangle_line_2(cls, name="rectangle line 2"):
		points = [
			[-2.0, 1.0, 0.0],  # CV[0]
			[-2.0, -1.0, 0.0],  # CV[1]
			[2.0, -1.0, 0.0],  # CV[2]
			[2.0, 1.0, 0.0],  # CV[3]
			[-2.0, 1.0, 0.0],  # CV[4]
			[0.0, 0.0, 0.0],  # CV[5]
			[0.0, 0.0, 2.0],  # CV[6]
			[0.0, 0.0, 0.0],  # CV[7]
			[2.0, 1.0, 0.0],  # CV[8]
			[2.0, -1.0, 0.0],  # CV[9]
			[0.0, 0.0, 0.0],  # CV[10]
			[2.0, -1.0, 0.0],  # CV[11]
			[-2.0, -1.0, 0.0],  # CV[12]
			[0.0, 0.0, 0.0]  # CV[13]
		]
		
		curve = cmds.curve(name=name, degree=1, point=points)
		return curve
	
	@classmethod
	def create_diamond(cls, name="diamond"):
		points = [
			[7.360295492086398e-07, 12.854696039846903, 2.6969651662128694e-06],
			[4.532699824175749, 10.977191977264255, 1.978351797561391e-06],
			[6.410202845855181, 6.4444924579622445, 1.6806927194639979e-06],
			[4.532698783272554, 1.9117933698159675, 1.978351797561391e-06],
			[-7.360293973393767e-07, 0.03429034813648535, 2.6969651662128694e-06],
			[-4.5326998241756975, 1.9117944107191747, 2.740154668859026e-06],
			[-6.410202845855189, 6.4444939300211495, 2.758040441847511e-06],
			[-4.53269878327252, 10.977193018167426, 2.740154668859026e-06],
			[7.360295492086398e-07, 12.854696039846903, 2.6969651662128694e-06],
			[2.26635275507834, 10.977192237489763, -3.925426399464013],
			[3.205100542810302, 6.4444928259770435, -5.551393730752744],
			[2.2663517141751557, 1.911793630041462, -3.925426399464013],
			[-7.360293973393767e-07, 0.03429034813648535, 2.6969651662128694e-06],
			[2.26634654864588, 1.911793630042082, 3.92543107478102],
			[3.2051023030449786, 6.4444928259768695, 5.551398108410686],
			[2.266347589549069, 10.977192237490303, 3.92543107478102],
			[7.360295492086398e-07, 12.854696039846903, 2.6969651662128694e-06],
			[-2.2663465486467453, 10.977192757941367, -3.925432091053521],
			[-3.2051023030458317, 6.444493562006521, -5.551399124683152],
			[-2.2663475895499317, 1.9117941504930531, -3.925432091053521],
			[-7.360293973393767e-07, 0.03429034813648535, 2.6969651662128694e-06],
			[-2.2663463448753403, 1.911794150492904, 3.925431793393355],
			[-3.205100542810149, 6.444493562006308, 5.551399124683115],
			[-2.266345303972156, 10.977192757941204, 3.925431793393355],
			[7.360295492086398e-07, 12.854696039846903, 2.6969651662128694e-06],
			[2.266347589549069, 10.977192237490303, 3.92543107478102],
			[-2.266345303972156, 10.977192757941204, 3.925431793393355],
			[-4.53269878327252, 10.977193018167426, 2.740154668859026e-06],
			[-2.2663465486467453, 10.977192757941367, -3.925432091053521],
			[2.26635275507834, 10.977192237489763, -3.925426399464013],
			[4.532699824175749, 10.977191977264255, 1.978351797561391e-06],
			[2.266347589549069, 10.977192237490303, 3.92543107478102],
			[3.2051023030449786, 6.4444928259768695, 5.551398108410686],
			[6.410202845855181, 6.4444924579622445, 1.6806927194639979e-06],
			[3.205100542810302, 6.4444928259770435, -5.551393730752744],
			[-3.2051023030458317, 6.444493562006521, -5.551399124683152],
			[-6.410202845855189, 6.4444939300211495, 2.758040441847511e-06],
			[-3.205100542810149, 6.444493562006308, 5.551399124683115],
			[3.2051023030449786, 6.4444928259768695, 5.551398108410686],
			[2.26634654864588, 1.911793630042082, 3.92543107478102],
			[-2.2663463448753403, 1.911794150492904, 3.925431793393355],
			[-4.5326998241756975, 1.9117944107191747, 2.740154668859026e-06],
			[-2.2663475895499317, 1.9117941504930531, -3.925432091053521],
			[2.2663517141751557, 1.911793630041462, -3.925426399464013],
			[4.532698783272554, 1.9117933698159675, 1.978351797561391e-06],
			[2.26634654864588, 1.911793630042082, 3.92543107478102],
		]
		
		diamond = cmds.curve(name=name, degree=1, point=points)
		return diamond
	
	@classmethod
	def create_lollipop_ctrl(cls, name="lollipop_ctrl", scale=1.0):
		"""
		Create a stylized lollipop control as one transform with two curve shapes:
		- a stick (linear)
		- a circular head (periodic cubic)
		"""
		
		# --- Lollipop stick (curve 1) ---
		lollipop_1 = [
			1,  # degree
			[(0.0, 0.0, -0.595),
			 (0.0, 0.0, 0.202),
			 (0.0, 0.0, 1.0)],  # CVs
			[0.0, 1.0, 2.0]  # knots
		]
		
		stick = cmds.curve(
			d=lollipop_1[0],
			p=[(x * scale, y * scale, z * scale) for x, y, z in lollipop_1[1]],
			k=lollipop_1[2],
			n=f"{name}_stickTmp"
		)
		
		# --- Lollipop head (curve 2) ---
		lollipop_2 = [
			True,  # periodic
			3,  # degree
			[(0.156, 0.0, -0.951),
			 (0.0, 0.0, -1.015),
			 (-0.156, 0.0, -0.951),
			 (-0.221, 0.0, -0.794),
			 (-0.156, 0.0, -0.638),
			 (0.0, 0.0, -0.573),
			 (0.156, 0.0, -0.638),
			 (0.221, 0.0, -0.794),
			 (0.156, 0.0, -0.951),
			 (0.0, 0.0, -1.015),
			 (-0.156, 0.0, -0.951)],  # CVs
			[-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]  # knots
		]
		
		head = cmds.curve(
			per=lollipop_2[0],
			d=lollipop_2[1],
			p=[(x * scale, y * scale, z * scale) for x, y, z in lollipop_2[2]],
			k=lollipop_2[3],
			n=f"{name}_headTmp"
		)
		
		# --- Combine both curves into one transform ---
		ctrl = cmds.createNode("transform", n=name)
		for src in (stick, head):
			shapes = cmds.listRelatives(src, s=True, path=True) or []
			for s in shapes:
				cmds.parent(s, ctrl, add=True, shape=True)
			cmds.delete(src)
		
		# --- Optional: tidy up shape names ---
		shapes = cmds.listRelatives(ctrl, s=True, fullPath=False) or []
		for i, s in enumerate(shapes, 1):
			cmds.rename(s, f"{name}Shape_{i:02d}")
		
		return ctrl


	@classmethod
	def create_arrow_curve(cls, name="arrow_crv", scale=1.0):
		"""
		Create an arrow-shaped curve using predefined CV data.
		"""
		points = [
			(0.166, 0.0, 0.166),
			(0.664, 0.0, 0.166),
			(0.664, 0.0, 0.332),
			(0.996, 0.0, 0.0),
			(0.664, 0.0, -0.332),
			(0.664, 0.0, -0.166),
			(0.166, 0.0, -0.166),
			(0.166, 0.0, -0.664),
			(0.332, 0.0, -0.664),
			(0.0, 0.0, -0.996),
			(-0.332, 0.0, -0.664),
			(-0.166, 0.0, -0.664),
			(-0.166, 0.0, -0.166),
			(-0.664, 0.0, -0.166),
			(-0.664, 0.0, -0.332),
			(-0.996, 0.0, 0.0),
			(-0.664, 0.0, 0.332),
			(-0.664, 0.0, 0.166),
			(-0.166, 0.0, 0.166),
			(-0.166, 0.0, 0.664),
			(-0.332, 0.0, 0.664),
			(0.0, 0.0, 0.996),
			(0.332, 0.0, 0.664),
			(0.166, 0.0, 0.664),
			(0.166, 0.0, 0.166)
		]
		
		points = [(p[0] * scale, p[1] * scale, p[2] * scale) for p in points]
		
		crv = cmds.curve(name=name, degree=1, point=points)
		return crv

	@classmethod
	def create_arrow_curve(cls, name="arrow_ctrl"):
		"""
		Create a simple arrow-shaped curve controller.
		Uses predefined CV and knot data.
		"""
		points = [
			(-0.243, 0.0, -1.0),
			(0.243, 0.0, -1.0),
			(0.243, 0.0, 0.271),
			(0.485, 0.0, 0.271),
			(0.0, 0.0, 1.0),
			(-0.485, 0.0, 0.271),
			(-0.243, 0.0, 0.271),
			(-0.243, 0.0, -1.0)
		]
	
		knots = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
	
		curve = cmds.curve(
			name=name,
			degree=1,
			point=points,
			knot=knots
		)
	
		return curve
